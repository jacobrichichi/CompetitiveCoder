{"ast":null,"code":"import _classCallCheck from \"C:/Users/jacob/Comp-Coder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/jacob/Comp-Coder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/jacob/Comp-Coder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/jacob/Comp-Coder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\jacob\\\\Comp-Coder\\\\client\\\\src\\\\components\\\\dashboard\\\\CompTimer.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CompTimer = /*#__PURE__*/function (_Component) {\n  _inherits(CompTimer, _Component);\n\n  var _super = _createSuper(CompTimer);\n\n  function CompTimer() {\n    var _this;\n\n    _classCallCheck(this, CompTimer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      minutes: 0,\n      seconds: 30\n    };\n    return _this;\n  }\n\n  _createClass(CompTimer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.setState({\n        minutes: localStorage.getItem('compMinutes') || 0,\n        seconds: localStorage.getItem('compSeconds') || 30\n      });\n      this.compInterval = setInterval(function () {\n        if (_this2.state.seconds > 0) {\n          _this2.setState({\n            seconds: _this2.state.seconds - 1\n          });\n        }\n\n        if (_this2.state.seconds === 0) {\n          if (_this2.state.minutes === 0) {\n            _this2.props.timesUp();\n\n            clearInterval(_this2.compInterval);\n          } else {\n            _this2.setState({\n              minutes: _this2.state.minutes - 1,\n              seconds: 59\n            });\n          }\n        }\n\n        localStorage.setItem('compMinutes', _this2.state.minutes);\n        localStorage.setItem('compSeconds', _this2.state.seconds);\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.compInterval);\n      console.log('unmount timer');\n      localStorage.removeItem('compMinutes');\n      localStorage.removeItem('compSeconds');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          minutes = _this$state.minutes,\n          seconds = _this$state.seconds;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: minutes === 0 && seconds === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"00:00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [minutes, \": \", seconds < 10 ? '0' + seconds : seconds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return CompTimer;\n}(Component);\n\nexport { CompTimer as default };","map":{"version":3,"sources":["C:/Users/jacob/Comp-Coder/client/src/components/dashboard/CompTimer.js"],"names":["React","Component","CompTimer","state","minutes","seconds","setState","localStorage","getItem","compInterval","setInterval","props","timesUp","clearInterval","setItem","console","log","removeItem"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;IAEqBC,S;;;;;;;;;;;;;;;UAElBC,K,GAAQ;AAACC,MAAAA,OAAO,EAAE,CAAV;AAAaC,MAAAA,OAAO,EAAE;AAAtB,K;;;;;;WAGT,8BAAoB;AAAA;;AAElB,WAAKC,QAAL,CACA;AAACF,QAAAA,OAAO,EAAGG,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,CAAlD;AACCH,QAAAA,OAAO,EAAGE,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC;AADlD,OADA;AAKA,WAAKC,YAAL,GAAoBC,WAAW,CAAC,YAAM;AAEpC,YAAG,MAAI,CAACP,KAAL,CAAWE,OAAX,GAAqB,CAAxB,EAA0B;AACxB,UAAA,MAAI,CAACC,QAAL,CAAc;AACZD,YAAAA,OAAO,EAAE,MAAI,CAACF,KAAL,CAAWE,OAAX,GAAmB;AADhB,WAAd;AAGD;;AAED,YAAG,MAAI,CAACF,KAAL,CAAWE,OAAX,KAAsB,CAAzB,EAA2B;AACzB,cAAG,MAAI,CAACF,KAAL,CAAWC,OAAX,KAAqB,CAAxB,EAA0B;AACxB,YAAA,MAAI,CAACO,KAAL,CAAWC,OAAX;;AACAC,YAAAA,aAAa,CAAC,MAAI,CAACJ,YAAN,CAAb;AACD,WAHD,MAII;AACF,YAAA,MAAI,CAACH,QAAL,CAAc;AACVF,cAAAA,OAAO,EAAE,MAAI,CAACD,KAAL,CAAWC,OAAX,GAAmB,CADlB;AAEVC,cAAAA,OAAO,EAAE;AAFC,aAAd;AAID;AACF;;AAEDE,QAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoC,MAAI,CAACX,KAAL,CAAWC,OAA/C;AACAG,QAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoC,MAAI,CAACX,KAAL,CAAWE,OAA/C;AACD,OAvB8B,EAuB5B,IAvB4B,CAA/B;AAwBD;;;WACD,gCAAsB;AAEpBQ,MAAAA,aAAa,CAAC,KAAKJ,YAAN,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAT,MAAAA,YAAY,CAACU,UAAb,CAAwB,aAAxB;AACAV,MAAAA,YAAY,CAACU,UAAb,CAAwB,aAAxB;AAEF;;;WAEA,kBAAQ;AACN,wBAA2B,KAAKd,KAAhC;AAAA,UAAOC,OAAP,eAAOA,OAAP;AAAA,UAAgBC,OAAhB,eAAgBA,OAAhB;AACA,0BACE;AAAA,kBAAMD,OAAO,KAAG,CAAV,IAAeC,OAAO,KAAK,CAA3B,gBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA/B,gBAAgD;AAAA,qBAAKD,OAAL,QAAgBC,OAAO,GAAE,EAAT,GAAc,MAAMA,OAApB,GAA8BA,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtD;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;;;;EAnDoCJ,S;;SAAlBC,S","sourcesContent":["import React, { Component } from 'react';\r\n \r\nexport default class CompTimer extends Component {\r\n\r\n   state = {minutes: 0, seconds: 30};\r\n\r\n\r\n  componentWillMount(){\r\n\r\n    this.setState(\r\n    {minutes: (localStorage.getItem('compMinutes') || 0),\r\n     seconds: (localStorage.getItem('compSeconds') || 30)});\r\n\r\n\r\n    this.compInterval = setInterval(() => {\r\n\r\n      if(this.state.seconds > 0){\r\n        this.setState({\r\n          seconds: this.state.seconds-1\r\n        })\r\n      }\r\n\r\n      if(this.state.seconds=== 0){\r\n        if(this.state.minutes===0){\r\n          this.props.timesUp();\r\n          clearInterval(this.compInterval);\r\n        }\r\n        else{\r\n          this.setState({\r\n              minutes: this.state.minutes-1,\r\n              seconds: 59\r\n           })\r\n        }\r\n      }\r\n\r\n      localStorage.setItem('compMinutes', this.state.minutes);\r\n      localStorage.setItem('compSeconds', this.state.seconds);\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount(){\r\n\r\n    clearInterval(this.compInterval);\r\n    console.log('unmount timer');\r\n    localStorage.removeItem('compMinutes');\r\n    localStorage.removeItem('compSeconds');\r\n\r\n }\r\n\r\n  render(){\r\n    const {minutes, seconds} = this.state;\r\n    return(\r\n      <div>{minutes===0 && seconds === 0 ? <h4>00:00</h4> : <h4>{minutes}: {seconds <10 ? '0' + seconds : seconds}</h4>}</div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}